---
export const prerender = false;
import ProductCard from "@/components/product/product-card.astro";
import Footer from "@/layouts/footer.astro";
import Main from "@/layouts/main.astro";
import {
  CATEGORY_COLLECTION,
  IMAGE_COLLECTION,
  pb,
  PRODUCT_COLLECTION,
  PRODUCT_VARIANT_ATTRIBUTES_COLLECTION,
} from "@/lib/pocketbase";
import { convertImageUrl, formatAttributes } from "@/lib/utils";
import BadgePercentIcon from "@lucide/astro/icons/badge-percent";
import ChevronLeftIcon from "@lucide/astro/icons/chevron-left";
import ChevronRightIcon from "@lucide/astro/icons/chevron-right";
import DollarSignIcon from "@lucide/astro/icons/dollar-sign";
import HeadphonesIcon from "@lucide/astro/icons/headphones";
import TruckIcon from "@lucide/astro/icons/truck";
import { Image } from "astro:assets";

async function fetchBanners() {
  try {
    const response = await pb.collection(IMAGE_COLLECTION).getList(1, 5, {
      filter: `type="banner"`,
    });

    return { data: response, error: null };
  } catch (error) {
    return { data: null, error: error };
  }
}

const { data: banners } = await fetchBanners();

const images = banners?.items?.map((item) => ({
  ctaUrl: item?.href,
  imgSrc: convertImageUrl(item),
}));

async function fetchProductGroupByCategory() {
  try {
    const data = await pb.collection(CATEGORY_COLLECTION).getList(1, 5);

    for (const item of data.items) {
      const products = await pb.collection(PRODUCT_COLLECTION).getList(1, 5, {
        filter: `category = "${item?.id}"`,
        expand: "thumbnail",
      });
      item.products = products.items;
    }
    return data;
  } catch (error) {
    return null;
  }
}

async function getProductOptions(id?: string) {
  const data = await pb
    .collection(PRODUCT_VARIANT_ATTRIBUTES_COLLECTION)
    .getFullList({
      filter: `variant.product = "${id}"`,
      expand: "variant,attribute,attribute_value",
      sort: "-attribute.order",
    });

  return formatAttributes(data);
}

async function fetchLatestProducts() {
  try {
    const data = await pb.collection(PRODUCT_COLLECTION).getList(1, 4, {
      sort: "-created",
      expand: "thumbnail",
    });
    for (const item of data.items) {
      const opts = await getProductOptions(item?.id);
      item.options = opts;
    }
    return data;
  } catch (error) {
    return null;
  }
}

const categories = await fetchProductGroupByCategory();
const latestProducts = await fetchLatestProducts();
---

<Main title="Trang chủ">
  <div x-data="carousel">
    <div class="embla relative">
      <div class="embla__container">
        {
          images?.map((item: any) => (
            <div class="embla__slide">
              <a href={item?.ctaUrl}>
                <Image
                  class="h-[calc(100vh-80px)] object-cover w-full"
                  height={100}
                  width={100}
                  src={item?.imgSrc ?? ""}
                  alt="slide"
                  loading="eager"
                />
              </a>
            </div>
          ))
        }
      </div>
      <button
        x-cloak
        x-show="canNext"
        x-on:click="next"
        type="button"
        class="text-white justify-center group absolute lg:end-80 end-0 top-1/2 z-10 flex -translate-y-1/2 items-center rounded-full transition duration-150 ease-out active:bg-gray-100 cursor-pointer hover:bg-white hover:text-black size-10"
        aria-label="Next Image Slide"
      >
        <ChevronRightIcon size={18} />
        <span class="sr-only">Next</span>
      </button>

      <button
        x-cloak
        x-show="canPrev"
        x-on:click="prev"
        type="button"
        class="text-white justify-center group absolute lg:start-80 start-0 top-1/2 z-10 flex -translate-y-1/2 items-center rounded-full transition duration-150 ease-out active:bg-gray-100 cursor-pointer hover:bg-white hover:text-black size-10"
        aria-label="Previous Image Slide"
      >
        <ChevronLeftIcon size={18} />
        <span class="sr-only">Previous</span>
      </button>
    </div>
  </div>

  <section class="grid grid-cols-4 gap-2 mt-16 max-w-7xl mx-auto">
    <div class="col-span-2 lg:col-span-1">
      <div
        class="flex bg-gray-50 items-center justify-center gap-2 py-4 px-4 rounded-md"
      >
        <TruckIcon size={32} stroke-width={1} />
        <div>
          <p class="font-semibold text-sm">Miễn phí vận chuyển</p>
          <p class="text-gray-500 text-xs">Contact us 24 hours a day</p>
        </div>
      </div>
    </div>
    <div class="col-span-2 lg:col-span-1">
      <div
        class="flex bg-gray-50 items-center justify-center gap-2 py-4 px-4 rounded-md"
      >
        <DollarSignIcon size={32} stroke-width={1} />
        <div>
          <p class="font-semibold text-sm">Đổi trả & hoàn tiền</p>
          <p class="text-gray-500 text-xs">Contact us 24 hours a day</p>
        </div>
      </div>
    </div>
    <div class="col-span-2 lg:col-span-1">
      <div
        class="flex bg-gray-50 items-center justify-center gap-2 py-4 px-4 rounded-md"
      >
        <BadgePercentIcon size={32} stroke-width={1} />
        <div>
          <p class="font-semibold text-sm">Giảm giá</p>
          <p class="text-gray-500 text-xs">Contact us 24 hours a day</p>
        </div>
      </div>
    </div>
    <div class="col-span-2 lg:col-span-1">
      <div
        class="flex bg-gray-50 items-center justify-center gap-2 py-4 px-4 rounded-md"
      >
        <HeadphonesIcon size={32} stroke-width={1} />
        <div>
          <p class="font-semibold text-sm">Hỗ trợ 24/7</p>
          <p class="text-gray-500 text-xs">Contact us 24 hours a day</p>
        </div>
      </div>
    </div>
  </section>

  <section
    class="mt-16 max-w-7xl mx-auto"
    x-data=`{tabs: ${JSON.stringify(categories?.items)}, tab: 0}`
  >
    <div class="mb-6">
      <h3 class="text-xl font-bold">Danh mục</h3>
    </div>
    <div class="flex lg:gap-6 gap-2 overflow-auto no-scrollbar">
      <template x-for="(value, index) in tabs">
        <div>
          <button
            x-on:click="tab = index"
            x-text="value.name"
            type="button"
            :class="tab == index ? 'bg-blue-500 text-white font-bold hover:bg-blue-600' : 'bg-gray-50 text-black hover:bg-gray-100'"
            class="w-max text-sm transition-all duration-150 cursor-pointer rounded-full px-4 py-2"
          ></button>
        </div>
      </template>
    </div>
    {
      categories?.items?.map((item, index) => (
        <div x-show={`tab == ${index}`} class="w-full">
          <div class="grid grid-cols-2 md:grid-cols-4 md:gap-6 gap-2 mt-6">
            {item?.products?.map((item: any) => (
              <ProductCard
                isBtn
                data={{
                  id: item?.id,
                  name: item?.name,
                  price: item?.price,
                  discount: item?.discount,
                  slug: `/san-pham/${item?.slug}`,
                  thumbnail: convertImageUrl(item?.expand?.thumbnail),
                }}
              >
                <Image
                  slot="image"
                  width={100}
                  height={100}
                  src={convertImageUrl(item?.expand?.thumbnail) ?? "/"}
                  loading="lazy"
                  alt={item?.name ?? "product_image"}
                  class="aspect-square w-full bg-gray-200 object-cover group-hover:scale-105 xl:aspect-1/1 transition-all duration-300 ease-in-out"
                />
              </ProductCard>
            ))}
          </div>
        </div>
      ))
    }
  </section>
  <section class="mt-16 max-w-7xl mx-auto">
    <div class="mb-6">
      <h3 class="text-xl font-bold">Sản phẩm mới nhất</h3>
    </div>
    <div class="grid grid-cols-2 md:grid-cols-4 md:gap-6 gap-2 mt-6">
      {
        latestProducts?.items?.map((item: any) => (
          <ProductCard
            isBtn
            data={{
              id: item?.id,
              name: item?.name,
              price: item?.price,
              discount: item?.discount,
              slug: `/san-pham/${item?.slug}`,
              thumbnail: convertImageUrl(item?.expand?.thumbnail),
              options: item?.options,
            }}
          >
            <Image
              slot="image"
              width={100}
              height={100}
              src={convertImageUrl(item?.expand?.thumbnail) ?? "/"}
              loading="lazy"
              alt={item?.name ?? "product_image"}
              class="aspect-square w-full bg-gray-200 object-cover group-hover:scale-105 xl:aspect-1/1 transition-all duration-300 ease-in-out"
            />
          </ProductCard>
        ))
      }
    </div>
    <div class="text-center mt-6">
      <a
        href="/"
        class="px-4 py-2 rounded-full bg-blue-500 text-white text-sm font-semibold mt-6 hover:bg-blue-600"
        >Xem thêm</a
      >
    </div>
  </section>

  <Footer slot="footer" />
</Main>

<style>
  .embla {
    overflow: hidden;
  }
  .embla__container {
    display: flex;
  }
  .embla__slide {
    flex: 0 0 100%;
    min-width: 0;
  }
</style>
