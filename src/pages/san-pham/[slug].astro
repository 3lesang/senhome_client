---
export const prerender = false;

import FreeShipIcon from "@/assets/free-ship.svg";
import LocationIcon from "@/assets/location.svg";
import PhoneIcon from "@/assets/phone.svg";
import ReturnIcon from "@/assets/return-60.svg";
import OptionButton from "@/components/product/option-button.astro";
import OptionText from "@/components/product/option-text.astro";
import ProductCard from "@/components/product/product-card.astro";
import ImageCarousel from "@/components/product/product-detail-image-carousel.astro";
import Footer from "@/layouts/footer.astro";
import Main from "@/layouts/main.astro";
import {
  IMAGE_COLLECTION,
  pb,
  PRODUCT_COLLECTION,
  PRODUCT_VARIANT_ATTRIBUTES_COLLECTION,
} from "@/lib/pocketbase";
import {
  convertImageUrl,
  formatVND,
  groupByAttributes,
  groupByVariant,
} from "@/lib/utils";
import "@/styles/content.css";
import ShoppingCartIcon from "@lucide/astro/icons/shopping-cart";
import { Image } from "astro:assets";

const { slug } = Astro.params;

async function getProduct(slug?: string) {
  if (!slug) return null;
  try {
    return await pb
      .collection(PRODUCT_COLLECTION)
      .getFirstListItem(`slug="${slug}"`, {
        expand: "category, thumbnail",
      });
  } catch (error) {
    return null;
  }
}

async function getRelateProduct(product_id?: string, category_id?: string) {
  try {
    return await pb.collection(PRODUCT_COLLECTION).getList(1, 4, {
      filter: `id!="${product_id}"&&category="${category_id}"`,
      expand: "thumbnail",
    });
  } catch (error) {
    return null;
  }
}

async function getProductOptions(id?: string) {
  try {
    return await pb
      .collection(PRODUCT_VARIANT_ATTRIBUTES_COLLECTION)
      .getFullList({
        filter: `variant.product="${id}"`,
        expand: "variant,attribute,attribute_value",
        sort: "-attribute.order",
      });
  } catch (error) {
    return null;
  }
}

async function getImages(productId?: string) {
  try {
    return await pb.collection(IMAGE_COLLECTION).getFullList({
      filter: `product="${productId}"||variant.product="${productId}"`,
    });
  } catch (error) {
    return null;
  }
}

const product = await getProduct(slug);
const relateProducts = await getRelateProduct(product?.id, product?.category);
const optionData = await getProductOptions(product?.id);
const images = await getImages(product?.id);

const options = groupByAttributes(optionData ?? []);
const variants = groupByVariant(optionData ?? []);

const cheapProduct = variants?.[0]?.variant;
const expensiveProduct = variants?.[variants?.length - 1]?.variant;

const galleryData = images?.map((item) => ({
  id: item?.variant,
  image: convertImageUrl(item) || "",
}));
---

<Main title={product?.name}>
  <div>
    <div class="lg:max-w-7xl mx-auto">
      <div class="mt-10 mb-6">
        <nav
          class="text-sm text-on-surface dark:text-on-surface-dark"
          aria-label="breadcrumb"
        >
          <ol class="flex flex-wrap items-center gap-1">
            <li class="flex items-center gap-1.5">
              <a
                href="/"
                aira-label="home"
                class="hover:text-on-surface-strong dark:hover:text-on-surface-dark-strong"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="currentColor"
                  viewBox="0 0 20 20"
                  aria-hidden="true"
                  class="size-4"
                >
                  <path
                    fill-rule="evenodd"
                    clip-rule="evenodd"
                    d="M9.293 2.293a1 1 0 0 1 1.414 0l7 7A1 1 0 0 1 17 11h-1v6a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1v-3a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v3a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1v-6H3a1 1 0 0 1-.707-1.707l7-7Z"
                  ></path>
                </svg>
              </a>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                aria-hidden="true"
                stroke-width="2"
                stroke="currentColor"
                class="size-4"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="m8.25 4.5 7.5 7.5-7.5 7.5"></path>
              </svg>
            </li>
            <li class="flex items-center gap-1">
              <a
                href={`/danh-muc/${product?.expand?.category?.slug}`}
                class="hover:text-on-surface-strong dark:hover:text-on-surface-dark-strong"
                >{product?.expand?.category?.name}</a
              >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                aria-hidden="true"
                stroke-width="2"
                stroke="currentColor"
                class="size-4"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="m8.25 4.5 7.5 7.5-7.5 7.5"></path>
              </svg>
            </li>
            <li
              class="flex items-center gap-1 text-on-surface-strong dark:text-on-surface-dark-strong"
              aria-current="page"
            >
              {product?.name}
            </li>
          </ol>
        </nav>
      </div>
      <div class="grid grid-cols-12 gap-10" x-data="productCarousel">
        <div class="col-span-12 lg:col-span-6">
          <div class="flex gap-2">
            <div class="flex flex-col gap-2">
              {
                galleryData?.map((item, index) => (
                  <ImageCarousel src={item?.image} index={index} />
                ))
              }
            </div>
            <div class="embla">
              <div class="embla__container">
                {
                  galleryData?.map((item: any) => (
                    <div class="embla__slide">
                      <Image
                        class="h-[790px] rounded object-cover w-full"
                        height={100}
                        width={100}
                        src={item?.image ?? ""}
                        alt="slide"
                        loading="eager"
                      />
                    </div>
                  ))
                }
              </div>
            </div>
          </div>
        </div>
        <div
          class="col-span-12 lg:col-span-6 space-y-4 px-4 lg:px-0"
          x-data=`options(${JSON.stringify(variants)})`
          x-init="window.addEventListener('scroll', () => checkScroll())"
        >
          <div class="space-y-1">
            <div>
              <h1 class="font-bold inline text-2xl">{product?.name}</h1>
            </div>
            <hr class="border-t my-8" />
            <div x-show="variant?.id">
              <p class="text-gray-600 text-sm">
                <span class="line-through" x-text="variant?.price"> </span>
              </p>
              <span class="font-bold text-3xl" x-text="variant?.priceDiscount">
              </span>
              <span
                x-show="variant?.discount"
                x-text="variant?.discount"
                class="font-bold text-white bg-blue-500 px-1 py-1 rounded-2xl"
              >
              </span>
            </div>
            <div x-show="!variant?.id">
              {
                Number(variants?.length) > 1 ? (
                  <div>
                    {Number(cheapProduct?.discount) > 0 &&
                      Number(expensiveProduct?.discount) > 0 && (
                        <p class="text-gray-600 text-sm line-through">
                          <span>{formatVND(cheapProduct?.price)}</span>
                          <span> - </span>
                          <span>{formatVND(expensiveProduct?.price)}</span>
                        </p>
                      )}
                    <span class="font-bold text-3xl">
                      <span>
                        {formatVND(
                          cheapProduct?.price * (1 - cheapProduct?.discount)
                        )}
                      </span>
                      <span> - </span>
                      <span>
                        {formatVND(
                          expensiveProduct?.price *
                            (1 - expensiveProduct?.discount)
                        )}
                      </span>
                    </span>
                    {Number(cheapProduct?.discount) > 0 && (
                      <span class="font-bold text-white bg-blue-500 px-1 py-1 rounded-2xl">
                        -{cheapProduct?.discount * 100}%
                      </span>
                    )}
                  </div>
                ) : (
                  <div>
                    {product?.discount > 0 && (
                      <p class="text-gray-600 text-sm">
                        <span class="line-through">
                          {formatVND(product?.price)}
                        </span>
                      </p>
                    )}
                    <span class="font-bold text-3xl">
                      {formatVND(
                        product?.price - product?.price * product?.discount
                      )}
                    </span>
                    <span class="font-bold text-white bg-blue-500 px-1 py-1 rounded-2xl">
                      -{product?.discount * 100}%
                    </span>
                  </div>
                )
              }
            </div>
          </div>

          <div class="text-gray-600">
            {
              options?.map((item: any) => (
                <div class="space-y-4 mt-4">
                  <div>
                    <span class="">{item?.attribute_name}</span>
                    <OptionText option_id={item?.attribute_id} />
                  </div>
                  <div class="space-x-4">
                    {item?.values?.map((value: any) => {
                      const index = galleryData?.findIndex(
                        (item) => item.id == value.variant.id
                      );
                      return (
                        <OptionButton
                          index={index}
                          value={value}
                          option={item}
                        />
                      );
                    })}
                  </div>
                </div>
              ))
            }
          </div>

          <button
            class="flex justify-center items-center gap-2 bg-blue-500 py-3 cursor-pointer hover:bg-blue-600 rounded-full text-white font-bold w-full"
          >
            <ShoppingCartIcon size={16} />
            Thêm vào giỏ</button
          >
          <p class="text-center my-4">
            <a href="#description" class="underline font-bold">Mô tả sản phẩm</a
            >
          </p>
          <hr class="border-t" />

          <div
            class="grid grid-cols-2 bg-gray-50 rounded-lg h-32 mt-2 text-sm px-4 py-2 text-gray-800 gap-4"
          >
            <div class="flex items-center gap-4">
              <Image
                src={FreeShipIcon}
                alt=""
                height={100}
                width={100}
                class="size-10"
              />
              <span>Free ship cho đơn từ 200k</span>
            </div>
            <div class="flex items-center gap-4">
              <Image
                src={ReturnIcon}
                alt=""
                height={100}
                width={100}
                class="size-10"
              />
              <span>60 ngày đổi trả vì bất kỳ lý do gì</span>
            </div>
            <div class="flex items-center gap-4">
              <Image
                src={PhoneIcon}
                alt=""
                height={100}
                width={100}
                class="size-10"
              />
              <span>Hotline hỗ trợ từ 8h30 - 22h</span>
            </div>
            <div class="flex items-center gap-4">
              <Image
                src={LocationIcon}
                alt=""
                height={100}
                width={100}
                class="size-10"
              />
              <span>Đến tận nơi nhận hàng trả, hoàn tiền trong 24h</span>
            </div>
          </div>
          <div x-ref="target"></div>
          <div
            x-cloak
            x-show="passed"
            class="fixed top-0 start-0 end-0 bg-white z-99 shadow-lg"
          >
            <div class="max-w-7xl mx-auto">
              <div class="flex justify-between">
                <div class="flex items-center py-4 max-w-72 gap-2">
                  <Image
                    height={100}
                    width={100}
                    alt=""
                    src={convertImageUrl(product?.expand?.thumbnail) ?? "/"}
                    loading="lazy"
                    class="w-18 h-24 rounded-md object-cover"
                  />
                  <div>
                    <p class="line-clamp-1 font-bold">{product?.name}</p>
                    <div x-show="variant?.id">
                      <p class="text-gray-600 text-xs">
                        <span class="line-through" x-text="variant?.price">
                        </span>
                      </p>
                      <span class="font-bold" x-text="variant?.priceDiscount">
                      </span>
                      <span
                        x-show="variant?.discount"
                        x-text="variant?.discount"
                        class="font-bold text-white bg-blue-500 text-xs p-1 rounded-2xl"
                      >
                      </span>
                    </div>
                    <div x-show="!variant?.id">
                      {
                        Number(variants?.length) > 1 ? (
                          <div>
                            {Number(cheapProduct?.discount) > 0 &&
                              Number(expensiveProduct?.discount) > 0 && (
                                <p class="text-gray-600 text-xs line-through">
                                  <span>{formatVND(cheapProduct?.price)}</span>
                                  <span> - </span>
                                  <span>
                                    {formatVND(expensiveProduct?.price)}
                                  </span>
                                </p>
                              )}
                            <span class="font-bold">
                              <span>
                                {formatVND(
                                  cheapProduct?.price *
                                    (1 - cheapProduct?.discount)
                                )}
                              </span>
                              <span> - </span>
                              <span>
                                {formatVND(
                                  expensiveProduct?.price *
                                    (1 - expensiveProduct?.discount)
                                )}
                              </span>
                            </span>
                            {Number(cheapProduct?.discount) > 0 && (
                              <span class="font-bold text-white bg-blue-500 p-1 text-xs rounded-2xl">
                                -{cheapProduct?.discount * 100}%
                              </span>
                            )}
                          </div>
                        ) : (
                          <div>
                            {product?.discount > 0 && (
                              <p class="text-gray-600 text-xs">
                                <span class="line-through">
                                  {formatVND(product?.price)}
                                </span>
                              </p>
                            )}
                            <span class="font-bold">
                              {formatVND(
                                product?.price -
                                  product?.price * product?.discount
                              )}
                            </span>
                            <span class="font-bold text-white bg-blue-500 p-1 text-xs rounded-2xl">
                              -{product?.discount * 100}%
                            </span>
                          </div>
                        )
                      }
                    </div>
                  </div>
                </div>

                {
                  options?.map((item: any) => (
                    <div class="flex items-center border-l px-4">
                      <div class="space-y-2 text-sm">
                        <div>
                          <span>{item?.attribute_name}</span>
                          <OptionText option_id={item?.attribute_id} />
                        </div>
                        <div class="space-x-2">
                          {item?.values?.map((value: any) => {
                            const index = galleryData?.findIndex(
                              (item) => item.id == value.variant.id
                            );
                            return (
                              <OptionButton
                                index={index}
                                value={value}
                                option={item}
                              />
                            );
                          })}
                        </div>
                      </div>
                    </div>
                  ))
                }

                <div class="flex items-center border-l px-4">
                  <button
                    class="flex gap-2 cursor-pointer items-center bg-blue-500 hover:bg-blue-600 rounded-full font-bold text-white px-16 py-2"
                  >
                    <ShoppingCartIcon size={16} />
                    Thêm vào giỏ</button
                  >
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="mt-8" x-data="{ tab: 0 }">
      <div class="flex lg:max-w-7xl mx-auto font-semibold text-gray-700">
        <button
          type="button"
          class="cursor-pointer px-6 py-2 hover:bg-gray-50"
          :class="tab == 0 ? 'bg-gray-50' : ''"
          @click="tab = 0">Thông tin sản phẩm</button
        >
        <button
          type="button"
          class="cursor-pointer px-6 py-2 hover:bg-gray-50"
          :class="tab == 1 ? 'bg-gray-50' : ''"
          @click="tab = 1">Đánh giá</button
        >
      </div>
      <div
        x-cloak
        x-show="tab == 0"
        id="description"
        x-data="{ expanded: false, maxHeight: 1000 }"
        class="py-8 relative"
        :class="expanded ? '' : 'overflow-hidden'"
      >
        <h1 class="uppercase font-bold text-center text-xl">Mô tả sản phẩm</h1>
        <div
          class="flex justify-center z-60 left-1/2 -translate-x-1/2 w-fit absolute bottom-32"
          :class="expanded ? 'sticky top-[400px]' : ''"
        >
          <button
            @click="expanded = !expanded"
            class="bg-gray-50 hover:opacity-90 px-4 py-2 rounded-full cursor-pointer text-sm"
            :class="expanded ? 'opacity-20' : 'opacity-90'"
            x-text="expanded ? 'Thu gọn' : 'Xem thêm'"></button>
        </div>

        <div
          class="max-w-7xl mx-auto prose"
          :class="expanded ? '' : `max-h-[${maxHeight}px]`"
        >
          <div class="content" set:html={product?.description} />
        </div>
        <div
          x-show="!expanded"
          class="absolute bottom-0 left-0 z-40 right-0 h-96 bg-gradient-to-t from-white to-transparent"
        >
        </div>
      </div>
      <div class="py-8" x-cloak x-show="tab == 1">
        <h1 class="uppercase font-bold text-center text-xl">
          Đánh giá sản phẩm
        </h1>
      </div>
    </div>

    <section class="max-w-7xl mx-auto mt-16">
      <h3 class="uppercase font-bold text-xl mb-8">Gợi ý sản phẩm</h3>
      <div class="grid grid-cols-4 gap-4">
        {
          relateProducts?.items?.map((item) => (
            <ProductCard
              isBtn
              data={{
                id: item?.id,
                name: item?.name,
                price: item?.price,
                discount: item?.discount,
                slug: `/san-pham/${item?.slug}`,
                thumbnail: convertImageUrl(item?.expand?.thumbnail),
                options: item?.options,
              }}
            >
              <Image
                slot="image"
                width={100}
                height={100}
                src={convertImageUrl(item?.expand?.thumbnail) ?? "/"}
                loading="lazy"
                alt={item?.name ?? "product_image"}
                class="aspect-square w-full bg-gray-200 object-cover group-hover:scale-105 xl:aspect-1/1 transition-all duration-300 ease-in-out"
              />
            </ProductCard>
          ))
        }
      </div>
    </section>
  </div>
  <Footer slot="footer" />
</Main>

<style>
  .embla {
    overflow: hidden;
  }
  .embla__container {
    display: flex;
  }
  .embla__slide {
    flex: 0 0 100%;
    min-width: 0;
  }
</style>
