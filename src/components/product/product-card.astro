---
import { IMAGE_COLLECTION, pb } from "@/lib/pocketbase";
import { convertImageUrl, formatVND } from "@/lib/utils";
import { Image } from "astro:assets";
import CardCart from "./card-cart.astro";
import CardOptions from "./card-options.astro";

interface Props {
  isBtn?: boolean;
  data?: {
    id?: string;
    thumbnail?: string;
    discount?: number;
    price?: number;
    name?: string;
    slug?: string;
    options?: any[];
  };
}

const { data, isBtn = false } = Astro.props;

async function getImage(productId?: string) {
  try {
    return await pb
      .collection(IMAGE_COLLECTION)
      .getFirstListItem(
        `product="${productId}"||variant.product="${productId}"`
      );
  } catch (error) {
    return null;
  }
}

const image = await getImage(data?.id);
---

<script>
  import Alpine from "alpinejs";

  Alpine.data("product", () => ({
    options: new Map<string, any>(),
    select(data: any) {
      this.options.set(data.id, data.value);
    },
    selected(option_id: string, value_id: string) {
      if (!this.options.has(option_id)) return;
      return this.options.get(option_id).id == value_id;
    },
  }));
</script>
<a href={data?.slug}>
  <article x-data="product">
    <div class="rounded overflow-hidden relative group">
      {
        isBtn && (
          <div class="opacity-0 group-hover:opacity-100 transition-opacity duration-150 absolute bottom-2 start-2 end-2 rounded backdrop-blur-2xl z-50 text-center py-2">
            <CardCart data={data} />
          </div>
        )
      }
      <slot name="image" />
      <Image
        height={100}
        width={100}
        alt=""
        src={convertImageUrl(image) ?? "/"}
        loading="lazy"
        class="object-cover hidden group-hover:block aspect-square w-full bg-gray-200 xl:aspect-1/1 transition-all duration-300 ease-in-out"
      />
    </div>

    <div class="mt-4 space-y-2">
      <p class="line-clamp-2 group-hover:text-gray-600 text-sm text-gray-900">
        {data?.name}
      </p>

      <div>
        {
          data?.options?.map((item: any) => (
            <div class="space-x-2 mt-2">
              <span class="text-xs">{item?.attribute_name}</span>
              {item?.values?.map((value: any) => {
                const data = JSON.stringify({
                  id: item?.attribute_id,
                  value: {
                    id: value?.id,
                    name: value?.name,
                    attribute_name: item?.attribute_name,
                  },
                });
                const checked = `selected(${JSON.stringify(item?.attribute_id)}, ${JSON.stringify(value?.id)})`;
                return (
                  <CardOptions
                    name={value?.name}
                    checked={checked}
                    data={data}
                  />
                );
              })}
            </div>
          ))
        }
      </div>

      <div class="flex items-center gap-2 flex-wrap">
        {
          Number(data?.discount) > 0 && (
            <span class="px-2 py-1 rounded-md bg-blue-500 text-white text-xs font-bold">
              -{Number(data?.discount) * 100}%
            </span>
          )
        }
        {
          data?.price && (
            <p class="text-lg font-bold">
              {formatVND(
                Number(data?.price) -
                  Number(data?.price) * (Number(data?.discount) || 0)
              )}
            </p>
          )
        }

        {
          Number(data?.discount) > 0 && (
            <p class="text-gray-500 line-through">
              {formatVND(Number(data?.price))}
            </p>
          )
        }
      </div>
      <!-- <div class="text-xs space-x-1">
        <StarIcon className="fill-blue-500 text-blue-500 inline" size={14} />
        <span class="font-bold">4.8</span>
        <span class="text-gray-700">
          {new Intl.NumberFormat("en-US").format(2300)} đánh giá
        </span>
      </div> -->
    </div>
  </article>
</a>
