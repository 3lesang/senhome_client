---
import {
  IMAGE_COLLECTION,
  pb,
  PRODUCT_VARIANT_ATTRIBUTES_COLLECTION,
} from "@/lib/pocketbase";
import {
  convertImageUrl,
  formatVND,
  groupByAttributes,
  groupByVariant,
} from "@/lib/utils";
import PlusIcon from "@lucide/astro/icons/plus";
import { Image } from "astro:assets";
import CardOptions from "./card-options.astro";

interface Props {
  isBtn?: boolean;
  data?: {
    id?: string;
    thumbnail?: string;
    discount?: number;
    price?: number;
    name?: string;
    slug?: string;
  };
}

const { data, isBtn = false } = Astro.props;

async function getImage(productId?: string) {
  try {
    return await pb
      .collection(IMAGE_COLLECTION)
      .getFirstListItem(
        `product="${productId}"||variant.product="${productId}"`
      );
  } catch (error) {
    return null;
  }
}

async function getProductOptions(id?: string) {
  pb.autoCancellation(false);
  try {
    return await pb
      .collection(PRODUCT_VARIANT_ATTRIBUTES_COLLECTION)
      .getFullList({
        filter: `variant.product="${id}"`,
        expand: "variant,attribute,attribute_value",
        sort: "-attribute.order",
      });
  } catch (error) {
    return null;
  }
}

const optionData = await getProductOptions(data?.id);
const image = await getImage(data?.id);

const options = groupByAttributes(optionData ?? []);
const variants = groupByVariant(optionData ?? []);
---

<script>
  import type { CartItem, CartType } from "@/lib/type";
  import { formatVND } from "@/lib/utils";
  import Alpine from "alpinejs";

  interface ProductType {
    variant: any | null;
    options: Map<string, any>;
    disabled: boolean;
    handleSelect(option_id: string, data: any): void;
    selected(option_id: string, value_id: string): boolean;
    handleAddToCart(item: CartItem): void;
  }

  Alpine.data(
    "product",
    (variants: any[]): ProductType => ({
      options: new Map<string, any>(),
      variant: null,
      disabled: variants.length > 1,
      handleSelect(option_id: string, data: any) {
        this.options.set(option_id, data);

        const valueIds = Array.from(this.options.entries()).map(
          ([_, data]) => data.id
        );

        const arraysMatch = (arr1: string[], arr2: string[]) => {
          return (
            arr1.length === arr2.length &&
            arr1.every((item: string) => arr2.includes(item))
          );
        };

        const variant = variants.find((item) =>
          arraysMatch(item.values, valueIds)
        );

        if (!variant) {
          this.variant = {};
          this.disabled = true;
          return;
        }

        this.disabled = false;

        this.variant = {
          id: variant?.variant?.id,
          name: variant?.variant?.name,
          price: variant?.variant?.price,
          formatPrice: formatVND(variant?.variant?.price),
          formatPriceDiscount: formatVND(
            variant?.variant?.price * (1 - variant?.variant?.discount)
          ),
          discount: variant?.variant?.discount,
        };
      },
      selected(option_id: string, value_id: string) {
        return this.options.get(option_id)?.id == value_id;
      },
      handleAddToCart(item: CartItem) {
        const cart = Alpine.store("cart") as CartType;

        if (!this.disabled) {
          if (this.variant?.id) {
            const options = Array.from(this.options.entries()).map(
              ([_, data]) => ({
                value_name: data.name,
                value_id: data.id,
                attribute_name: data.option.attribute_name,
                attribute_id: data.option.attribute_id,
              })
            );
            cart.addToCart({
              product_id: item.id,
              id: this.variant.id,
              name: item.name,
              variant: { id: this.variant?.id },
              options,
              price: this.variant?.price,
              discount: this.variant?.discount,
              thumbnail: item?.thumbnail,
              slug: item?.slug,
              quantity: 1,
            });
          } else {
            cart.addToCart({
              product_id: item?.id,
              id: item?.id,
              name: item.name,
              price: item?.price,
              discount: item?.discount,
              thumbnail: item?.thumbnail,
              slug: item?.slug,
              quantity: 1,
            });
          }
        }
      },
    })
  );
</script>
<a href={data?.slug}>
  <article x-data={`product(${JSON.stringify(variants)})`}>
    <div class="rounded overflow-hidden relative group">
      <div
        class="opacity-0 group-hover:opacity-100 transition-opacity duration-150 absolute bottom-2 start-2 end-2 z-50 text-center"
      >
        <button
          :disabled="disabled"
          @click.prevent=`handleAddToCart(${JSON.stringify(data)})`
          class={`${!isBtn && "hidden"} cursor-pointer text-center text-sm disabled:bg-gray-600 disabled:cursor-default bg-blue-500 hover:to-blue-600 rounded-md px-8 py-2 text-white`}
        >
          <span x-text="disabled ? 'Chọn mẫu sản phẩm' : 'Thêm vào giỏ hàng'">
          </span>
          <PlusIcon size={16} class="inline" />
        </button>
      </div>

      <slot name="image" />

      <Image
        height={100}
        width={100}
        alt=""
        src={convertImageUrl(image) ?? "/"}
        loading="lazy"
        class="object-cover hidden group-hover:block aspect-square w-full bg-gray-200 xl:aspect-1/1 transition-all duration-300 ease-in-out"
      />
    </div>

    <div class="mt-4 space-y-2">
      <p class="line-clamp-2 group-hover:text-gray-600 text-sm text-gray-900">
        {data?.name}
      </p>

      <div>
        {
          options?.map((item: any) => (
            <div class="space-x-2 mt-2">
              <span class="text-xs">{item?.attribute_name}</span>
              {item?.values?.map((value: any) => (
                <CardOptions value={value} option={item} />
              ))}
            </div>
          ))
        }
      </div>

      <div class="flex items-center gap-2 flex-wrap">
        {
          Number(data?.discount) > 0 && (
            <span class="px-2 py-1 rounded-md bg-blue-500 text-white text-xs font-bold">
              -{Number(data?.discount) * 100}%
            </span>
          )
        }
        {
          data?.price && (
            <p class="text-lg font-bold">
              {formatVND(
                Number(data?.price) -
                  Number(data?.price) * (Number(data?.discount) || 0)
              )}
            </p>
          )
        }

        {
          Number(data?.discount) > 0 && (
            <p class="text-gray-500 line-through">
              {formatVND(Number(data?.price))}
            </p>
          )
        }
      </div>
      <!-- <div class="text-xs space-x-1">
        <StarIcon className="fill-blue-500 text-blue-500 inline" size={14} />
        <span class="font-bold">4.8</span>
        <span class="text-gray-700">
          {new Intl.NumberFormat("en-US").format(2300)} đánh giá
        </span>
      </div> -->
    </div>
  </article>
</a>
