---
import { ChevronLeftIcon, ChevronRightIcon } from "lucide-react";

interface Props {
  images: string;
}

const { images } = Astro.props;
---

<div
  x-data=`{
    // Images array
    images: ${images},

    // Image Slider options
    arrowsNavigation: true,
    dotsNavigation: true,
    transition: "slide", // '' for no transition, 'fade', 'slide', 'blur-sm'
    loop: true,
    autoplay: true,
    autoplayDuration: 3000,
    autoplayProgressBar: true,

    // Helpers
    currentIndex: 0,
    autoplayInterval: null,
    autoplayTimer: null,
    autoplayProgress: 0,

    // Initialization
    init() {
      // Start all autoplay intervals
      this.startAutoplayInterval("all");
    },

    // Display specific image
    set(index, from) {
      // Check that the index is valid
      if (index > -1 && index < this.images.length) {
        // The image is after current one
        if (index > this.currentIndex) {
          this.currentIndex = index;

          // If we are already in the last image and loop is disabled
          if (!this.loop && this.currentIndex === this.images.length - 1) {
            // Reset all autoplay intervals and stop
            this.resetAutoplayInterval("all");
          } else {
            // If it is triggered by the navigation button
            if (from === "button") {
              // Reset all autoplay interval and restart them
              this.resetAutoplayInterval("all", true);
            } else {
              // Reset autoplay timer interval and restart it
              this.resetAutoplayInterval("timer", true);
            }
          }
        } else if (index < this.currentIndex) {
          // Else if the image is before current one
          this.currentIndex = index;

          // If it is triggered by the navigation button
          if (from === "button") {
            // Reset all autoplay interval and restart them
            this.resetAutoplayInterval("all", true);
          } else {
            // Reset autoplay timer interval and restart it
            this.resetAutoplayInterval("timer", true);
          }
        }
      }
    },

    // Display next image
    next(from) {
      // Stop the carousel loop when reaching the last image if loop is disabled
      if (!this.loop && this.currentIndex === this.images.length - 1) {
        return;
      }

      // Go to next image
      this.set((this.currentIndex + 1) % this.images.length, from);
    },

    // Display previous image
    previous(from) {
      // Stop the carousel loop when reaching the first image if loop is disabled
      if (!this.loop && this.currentIndex === 0) {
        return;
      }

      // Go to previous image
      this.set(
        (this.currentIndex - 1 + this.images.length) % this.images.length,
        from
      );
    },

    // Start autoplay interval
    startAutoplayInterval(mode) {
      if (this.autoplay && (mode === "all" || mode === "interval")) {
        this.autoplayInterval = setInterval(
          () => this.next(),
          this.autoplayDuration
        );
      }

      if (
        this.autoplay &&
        this.autoplayProgressBar &&
        (mode === "all" || mode === "timer")
      ) {
        this.autoplayProgressBar = false;
        this.autoplayProgress = 0;
        this.autoplayProgressBar = true;

        this.autoplayTimer = setInterval(() => {
          this.autoplayProgress += 100 / (this.autoplayDuration / 100);
        }, 100);
      }
    },

    // Reset autoplay timer
    resetAutoplayInterval(mode, restart) {
      if (this.autoplay && (mode === "all" || mode === "interval")) {
        clearInterval(this.autoplayInterval);

        if (restart && mode === "interval") {
          this.startAutoplayInterval("interval");
        }
      }

      if (
        this.autoplay &&
        this.autoplayProgressBar &&
        (mode === "all" || mode === "timer")
      ) {
        clearInterval(this.autoplayTimer);

        if (restart && mode === "timer") {
          this.startAutoplayInterval("timer");
        } else if (!restart) {
          this.autoplayProgressBar = false;
          this.autoplayProgress = 0;
          this.autoplayProgressBar = true;
        }
      }

      if (restart && mode === "all") {
        this.startAutoplayInterval("all");
      }
    },
  }`
  class="mx-auto w-full group"
>
  <div
    class="relative overflow-hidden focus:outline-hidden focus-visible:ring-4 focus-visible:ring-teal-400/50"
    tabindex="0"
    x-on:keyup.right="next('button')"
    x-on:keyup.left="previous('button')"
  >
    <div
      class="aspect-16/10 h-[calc(100vh-80px)]"
      role="region"
      aria-roledescription="carousel"
      aria-label="Image Slider"
    >
      <template x-for="(image, index) in images" x-bind:key="index">
        <a x-bind:href="image.ctaUrl">
          <img
            x-bind:src="image.imgSrc"
            x-bind:alt="`Image ${index + 1}`"
            class="absolute start-0 top-0 h-full w-full object-cover"
            x-bind:class="{
            'transition duration-300 ease-in-out will-change-auto': transition,
            'z-1': currentIndex === index,
            'hidden': !transition && currentIndex !== index,
            'opacity-100': (transition === 'fade' || transition === 'blur-sm')  && currentIndex === index,
            'opacity-0 invisible': transition === 'fade' && currentIndex !== index,
            'blur-xl opacity-0': transition === 'blur-sm' && currentIndex !== index,
            'translate-x-0': transition === 'slide' && currentIndex === index,
            '-translate-x-full': transition === 'slide' && currentIndex > index,
            'translate-x-full': transition === 'slide' && currentIndex < index
          }"
            role="group"
            aria-roledescription="slide"
            x-bind:aria-label="`Image slide ${index + 1} of ${images.length}`"
            x-bind:aria-hidden="currentIndex !== index"
          />
        </a>
      </template>
    </div>
    <button
      x-cloak
      x-show="arrowsNavigation && !(!loop && currentIndex === 0)"
      x-on:click="previous('button')"
      type="button"
      class="text-white justify-center group absolute start-80 top-1/2 z-10 flex -translate-y-1/2 items-center rounded-full transition duration-150 ease-out active:bg-gray-100 cursor-pointer hover:bg-white hover:text-black size-10"
      aria-label="Previous Image Slide"
    >
      <ChevronLeftIcon size={18} />
      <span class="sr-only">Previous</span>
    </button>
    <button
      x-cloak
      x-show="arrowsNavigation && !(!loop && currentIndex === images.length - 1)"
      x-on:click="next('button')"
      type="button"
      class="text-white justify-center group absolute end-80 top-1/2 z-10 flex -translate-y-1/2 items-center rounded-full transition duration-150 ease-out active:bg-gray-100 cursor-pointer hover:bg-white hover:text-black size-10"
      aria-label="Next Image Slide"
    >
      <ChevronRightIcon size={18} />
      <span class="sr-only">Next</span>
    </button>
  </div>
</div>
